name: $(Build.BuildId)

# Triggers Pipeline only on Master
trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - LICENSE

# Disables triggering Pipeline run at creation of every Pull Request
pr: none

# Global variables for the pipeline
variables:
- group: 'AWS ECR-PUSH PROD'
- name: 'vmImage'
  value: 'ubuntu-latest'
- name: 'k8s-service-connection'
  value: 'Kubernetes-Hellman'
- name: 'kubernetes-namespace'
  value: 'logcollect'

stages:
# Continuous Integration steps
- stage: CI
  displayName: 'Continuous Integration'
  pool:
    vmImage: "$(vmImage)"

  jobs:
  - job: Build
    steps:

    - task: Bash@3
      inputs:
        targetType: 'filePath'
        filePath: '$(System.DefaultWorkingDirectory)/release/build_container_image.sh'
        arguments: $(Build.BuildId)
        workingDirectory: '$(System.DefaultWorkingDirectory)/release/'
      displayName: 'Build container image'
  
    - task: Bash@3
      inputs:
        targetType: 'filePath'
        filePath: '$(System.DefaultWorkingDirectory)/push_container_image.sh'
        arguments: $(Build.BuildId)
      displayName: 'Upload container image'
      env:
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)


    # Upload Kubernetes manifests to current artifact Pipeline from folder /k8s
    - publish: $(System.DefaultWorkingDirectory)/release
      artifact: release
      displayName: 'Publish Artifact: release'

# Continuous Deployment steps
- stage: CD
  displayName: 'Continuous Deployment'
  dependsOn: CI
  pool:
    vmImage: "$(vmImage)"
  # Run CD only if CI succeeds and if pipeline runs from Master branch
  condition: and(succeeded('CI'), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 

  jobs:
  - deployment: K8s
    displayName: 'Deploy to Kubernetes'
    environment: 'Hellman'

    strategy: 
      runOnce:
        deploy:
          steps:
          # Download manifest from current artifacts pipeline
          - download: current
            artifact: release
            displayName: 'Download Artifact: release'

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
            displayName: 'Install Kustomize'
              
          - task: Bash@3
            inputs:
              targetType: 'filePath'
              filePath: '$(Pipeline.Workspace)/release/kustomize-replace-image-prod.sh'
              arguments: $(Build.BuildId)
              workingDirectory: $(Pipeline.Workspace)/release/
            displayName: 'Set image tag in kustomize for production'

          # Apply Kubernetes manifests
          - task: Kubernetes@1
            displayName: 'Apply manifests'
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: '$(k8s-service-connection)'
              namespace: '$(kubernetes-namespace)'
              command: apply
              arguments: '-k $(Pipeline.Workspace)/release/k8s-orchestration/overlays/for-production/'